(in-package #:org.shirakumo.random-noise)

(define-noise-function value-noise/1d (point deriv)
  (let* ((i0 (the fixnum (floor (vx point))))
         (tt (- (vx point) (float i0 0f0)))
         (i0 (logand i0 255))
         (i1 (1+ i0))
         (h0 (noise i0))
         (h1 (noise i1))
         (dt (smooth-dt tt))
         (tt (smooth tt))
         (a h0)
         (b (- h1 h0)))
    (vsetf deriv (* b dt) 0 0)
    (/ (+ a (* b tt)) 255)))

(define-noise-function value-noise/2d (point deriv)
  (let* ((ix0 (the fixnum (floor (vx point))))
         (iy0 (the fixnum (floor (vy point))))
         (tx (- (vx point) (float ix0 0f0)))
         (ty (- (vy point) (float iy0 0f0)))
         (ix0 (logand ix0 255))
         (iy0 (logand iy0 255))
         (ix1 (1+ ix0))
         (iy1 (1+ iy0))
         (h0 (noise ix0))
         (h1 (noise ix1))
         (h00 (noise (+ h0 iy0)))
         (h10 (noise (+ h1 iy0)))
         (h01 (noise (+ h0 iy1)))
         (h11 (noise (+ h1 iy1)))
         (dtx (smooth-dt tx))
         (dty (smooth-dt ty))
         (tx (smooth tx))
         (ty (smooth ty))
         (a h00)
         (b (- h10 h00))
         (c (- h01 h00))
         (d (+ (- h11 h01 h10) h00)))
    (vsetf deriv
           (* (+ b (* d ty)) dtx)
           (* (+ c (* d tx)) dty)
           0)
    (/ (+ a (* b tx) (* (+ c (* d tx)) ty)) 255)))

(define-noise-function value-noise/3d (point deriv)
  (let* ((ix0 (the fixnum (floor (vx point))))
         (iy0 (the fixnum (floor (vy point))))
         (iz0 (the fixnum (floor (vz point))))
         (tx (- (vx point) (float ix0 0f0)))
         (ty (- (vy point) (float iy0 0f0)))
         (tz (- (vz point) (float iz0 0f0)))
         (ix0 (logand ix0 255))
         (iy0 (logand iy0 255))
         (iz0 (logand iz0 255))
         (ix1 (1+ ix0))
         (iy1 (1+ iy0))
         (iz1 (1+ iz0))
         (h0 (noise ix0))
         (h1 (noise ix1))
         (h00 (noise (+ h0 iy0)))
         (h10 (noise (+ h1 iy0)))
         (h01 (noise (+ h0 iy1)))
         (h11 (noise (+ h1 iy1)))
         (h000 (noise (+ h00 iz0)))
         (h100 (noise (+ h10 iz0)))
         (h010 (noise (+ h01 iz0)))
         (h110 (noise (+ h11 iz0)))
         (h001 (noise (+ h00 iz1)))
         (h101 (noise (+ h10 iz1)))
         (h011 (noise (+ h01 iz1)))
         (h111 (noise (+ h11 iz1)))
         (dtx (smooth-dt tx))
         (dty (smooth-dt ty))
         (dtz (smooth-dt tz))
         (tx (smooth tx))
         (ty (smooth ty))
         (tz (smooth tz))
         (a h000)
         (b (- h100 h000))
         (c (- h010 h000))
         (d (- h001 h000))
         (e (+ (- h110 h010 h100) h000))
         (f (+ (- h101 h001 h100) h000))
         (g (+ (- h011 h001 h010) h000))
         (h (+ (- h111 h011 h101 h110 h000) h001 h010 h100)))
    (vsetf deriv
           (* (+ b (* e ty) (* (+ f (* h ty)) tz)) dtx)
           (* (+ c (* e tx) (* (+ g (* h tx)) tz)) dty)
           (* (+ d (* f tx) (* (+ g (* h tx)) ty)) dtz))
    (/ (+ a (* b tx) (* (+ c (* e tx)) ty)
          (* (+ d (* f tx) (* (+ g (* h tx)) ty)) tz))
       255)))

(define-noise-entry-function value-noise
  (vec3 value-noise/3d)
  (vec2 value-noise/2d)
  (float value-noise/1d))
