(in-package #:org.shirakumo.random-noise)

(define-sample-function fractal/1d ((position (point 1)) (frequency single-float) (xxhash xxhash) (generator function) &key (octaves 1 (unsigned-byte 16)) (lacunarity 2 (unsigned-byte 16)) (persistence 0.5f0 single-float))
  (with-sample a (sample 0f0)
    (let ((amplitude-sum 0f0)
          (amplitude 1f0))
      (dotimes (o octaves)
        (with-sample b (funcall generator position frequency (!32 (+ o xxhash)))
          (incf a (* amplitude b))
          (incf adx (* amplitude bdx))
          (incf amplitude-sum amplitude)
          (setf frequency (* frequency lacunarity))
          (setf amplitude (* amplitude persistence))))
      (let ((s (/ amplitude-sum)))
        (sample (* a s)
                (* adx s))))))

(define-sample-function fractal/2d ((position (point 2)) (frequency single-float) (xxhash xxhash) (generator function) &key (octaves 1 (unsigned-byte 16)) (lacunarity 2 (unsigned-byte 16)) (persistence 0.5f0 single-float))
  (with-sample a (sample 0f0)
    (let ((amplitude-sum 0f0)
          (amplitude 1f0))
      (dotimes (o octaves)
        (with-sample b (funcall generator position frequency (!32 (+ o xxhash)))
          (incf a (* amplitude b))
          (incf adx (* amplitude bdx))
          (incf ady (* amplitude bdy))
          (incf amplitude-sum amplitude)
          (setf frequency (* frequency lacunarity))
          (setf amplitude (* amplitude persistence))))
      (let ((s (/ amplitude-sum)))
        (sample (* a s)
                (* adx s)
                (* ady s))))))

(define-sample-function fractal/3d ((position (point 3)) (frequency single-float) (xxhash xxhash) (generator function) &key (octaves 1 (unsigned-byte 16)) (lacunarity 2 (unsigned-byte 16)) (persistence 0.5f0 single-float))
  (with-sample a (sample 0f0)
    (let ((amplitude-sum 0f0)
          (amplitude 1f0))
      (dotimes (o octaves)
        (with-sample b (funcall generator position frequency (!32 (+ o xxhash)))
          (incf a (* amplitude b))
          (incf adx (* amplitude bdx))
          (incf ady (* amplitude bdy))
          (incf adz (* amplitude bdz))
          (incf amplitude-sum amplitude)
          (setf frequency (* frequency lacunarity))
          (setf amplitude (* amplitude persistence))))
      (let ((s (/ amplitude-sum)))
        (sample (* a s)
                (* adx s)
                (* ady s)
                (* adz s))))))
