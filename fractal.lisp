(in-package #:org.shirakumo.random-noise)

(define-noise-function fractal 1 ((generator function) &key (octaves 1 (unsigned-byte 16)) (lacunarity 2f0 single-float) (persistence 0.5f0 single-float))
  (with-sample a (sample 0f0)
    (let ((amplitude-sum 0f0)
          (amplitude 1f0))
      (dotimes (o octaves)
        (with-sample b (funcall generator position frequency (!32 (+ o xxhash)))
          (incf a (* amplitude b))
          (incf adx (* amplitude bdx))
          (incf amplitude-sum amplitude)
          (setf frequency (* frequency lacunarity))
          (setf amplitude (* amplitude persistence))))
      (let ((s (/ amplitude-sum)))
        (sample (* a s)
                (* adx s))))))

(define-noise-function fractal 2 ((generator function) &key (octaves 1 (unsigned-byte 16)) (lacunarity 2f0 single-float) (persistence 0.5f0 single-float))
  (with-sample a (sample 0f0)
    (let ((amplitude-sum 0f0)
          (amplitude 1f0))
      (dotimes (o octaves)
        (with-sample b (funcall generator position frequency (!32 (+ o xxhash)))
          (incf a (* amplitude b))
          (incf adx (* amplitude bdx))
          (incf ady (* amplitude bdy))
          (incf amplitude-sum amplitude)
          (setf frequency (* frequency lacunarity))
          (setf amplitude (* amplitude persistence))))
      (let ((s (/ amplitude-sum)))
        (sample (* a s)
                (* adx s)
                (* ady s))))))

(define-noise-function fractal 3 ((generator function) &key (octaves 1 (unsigned-byte 16)) (lacunarity 2f0 single-float) (persistence 0.5f0 single-float))
  (with-sample a (sample 0f0)
    (let ((amplitude-sum 0f0)
          (amplitude 1f0))
      (dotimes (o octaves)
        (with-sample b (funcall generator position frequency (!32 (+ o xxhash)))
          (incf a (* amplitude b))
          (incf adx (* amplitude bdx))
          (incf ady (* amplitude bdy))
          (incf adz (* amplitude bdz))
          (incf amplitude-sum amplitude)
          (setf frequency (* frequency lacunarity))
          (setf amplitude (* amplitude persistence))))
      (let ((s (/ amplitude-sum)))
        (sample (* a s)
                (* adx s)
                (* ady s)
                (* adz s))))))

(define-noise-toplevel fractal ((generator function) &key (octaves 1 (unsigned-byte 16)) (lacunarity 2f0 single-float) (persistence 0.5f0 single-float))
  generator :octaves octaves :lacunarity lacunarity :persistence persistence)
