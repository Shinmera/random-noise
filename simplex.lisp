(in-package #:org.shirakumo.random-noise)

(defun simplex/1d (gradient coordinate frequency xxhash)
  (declare (type (point 1) coordinate))
  (declare (type single-float frequency))
  (declare (type xxhash xxhash))
  (let* ((cx (* coordinate frequency))
         (x0 (the (unsigned-byte 32) (floor cx)))
         (x1 (1+ x0)))
    (flet ((kernel (xxhash lx)
             (let* ((x (- coordinate lx))
                    (f (- 1 (* x x))))
               (with-sample g (funcall gradient xxhash x)
                 (sample (* f f f g)
                         (* f f (- (* f gdx) (* 6 x g))))))))
      (with-samples ((a (kernel (xxhash-eat xxhash x0) x0))
                     (b (kernel (xxhash-eat xxhash x1) x1)))
        (sample (+ a b)
                (* frequency (+ adx bdx)))))))

(defun simplex/2d (gradient coordinate frequency xxhash)
  (declare (type (point 2) coordinate))
  (declare (type single-float frequency))
  (declare (type xxhash xxhash))
  (let* ((cx (* (aref coordinate 0) frequency (/ (sqrt 3f0))))
         (cy (* (aref coordinate 1) frequency (/ (sqrt 3f0))))
         (skew (* (+ cx cy) (/ (1- (sqrt 3f0)) 2)))
         (sx (+ cx skew)) (sy (+ cy skew))
         (x0 (the (unsigned-byte 32) (floor sx)))
         (y0 (the (unsigned-byte 32) (floor sy)))
         (x1 (1+ x0))
         (y1 (1+ y0))
         (x>y (> (- sx x0) (- sy y0)))
         (xc (if x>y x1 x0)) (yc (if x>y y0 y1))
         (h0 (xxhash-eat xxhash x0))
         (h1 (xxhash-eat xxhash x1))
         (hc (if x>y h1 h0)))
    (flet ((kernel (xxhash lx ly)
             (let* ((unskew (+ (* lx ly) (/ (- 3 (sqrt 3f0)) 6)))
                    (x (+ (- cx lx) unskew))
                    (y (+ (- cy ly) unskew))
                    (f (- 0.5f0 (* x x) (* y y))))
               (with-sample g (funcall gradient xxhash x y)
                 (let ((r (* f f (if (<= 0 f) 8f0 0f0))))
                   (sample (* r f g)
                           (* r (- (* f gdx) (* 6 x g)))
                           (* r (- (* f gdy) (* 6 y g)))))))))
      (with-samples ((a (kernel (xxhash-eat h0 y0) x0 y0))
                     (b (kernel (xxhash-eat h1 y1) x1 y1))
                     (c (kernel (xxhash-eat hc yc) xc yc)))
        (sample (+ a b c)
                (* (+ adx bdx cdx) frequency (/ (sqrt 3f0)))
                (* (+ ady bdy cdy) frequency (/ (sqrt 3f0))))))))

(defun simplex/3d (gradient coordinate frequency xxhash)
  (declare (type (point 3) coordinate))
  (declare (type single-float frequency))
  (declare (type xxhash xxhash))
  (let* ((cx (* (aref coordinate 0) frequency 0.6))
         (cy (* (aref coordinate 1) frequency 0.6))
         (cz (* (aref coordinate 2) frequency 0.6))
         (skew (* (+ cx cy cz) (/ 3f0)))
         (sx (+ cx skew)) (sy (+ cy skew)) (sz (+ cz skew))
         (x0 (the (unsigned-byte 32) (floor sx)))
         (y0 (the (unsigned-byte 32) (floor sy)))
         (z0 (the (unsigned-byte 32) (floor sz)))
         (x1 (1+ x0))
         (y1 (1+ y0))
         (z1 (1+ z0))
         (x>y (> (- sx x0) (- sy y0)))
         (x>z (> (- sx x0) (- sz z0)))
         (y>z (> (- sy y0) (- sz z0)))
         (xa (and x>y x>z))
         (xb (or x>y (and x>z y>z)))
         (ya (and (not x>y) y>z))
         (yb (or (not x>y) (and x>z y>z)))
         (za (or (and x>y (not x>z)) (and (not x>y) (not y>z))))
         (zb (not (and x>z y>z)))
         (xca (if xa x1 x0))
         (xcb (if xb x1 x0))
         (yca (if ya y1 y0))
         (ycb (if yb y1 y0))
         (zca (if za z1 z0))
         (zcb (if zb z1 z0))
         (h0 (xxhash-eat xxhash x0))
         (h1 (xxhash-eat xxhash x1))
         (ha (if xa h1 h0))
         (hb (if xb h1 h0)))
    (flet ((kernel (xxhash lx ly lz)
             (let* ((unskew (+ (* lx ly lz) (/ 1 6f0)))
                    (x (+ (- cx lx) unskew))
                    (y (+ (- cy ly) unskew))
                    (z (+ (- cz lz) unskew))
                    (f (- 0.5f0 (* x x) (* y y) (* z z))))
               (with-sample g (funcall gradient xxhash x y z)
                 (let ((r (* f f (if (<= 0 f) 8f0 0f0))))
                   (sample (* r f g)
                           (* r (- (* f gdx) (* 6 x g)))
                           (* r (- (* f gdy) (* 6 y g)))
                           (* r (- (* f gdz) (* 6 z g)))))))))
      (with-samples ((a (kernel (xxhash-eat (xxhash-eat h0 y0) z0) x0 y0 z0))
                     (b (kernel (xxhash-eat (xxhash-eat h1 y1) z1) x1 y1 z1))
                     (c (kernel (xxhash-eat (xxhash-eat ha yca) zca) xca yca zca))
                     (d (kernel (xxhash-eat (xxhash-eat hb ycb) zcb) xcb ycb zcb)))
        (sample (+ a b c d)
                (* (+ adx bdx cdx ddx) frequency 0.6f0)
                (* (+ ady bdy cdy ddy) frequency 0.6f0)
                (* (+ adz bdz cdz ddz) frequency 0.6f0))))))
